spring:
  application:
    name: fgsc-gateway

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_URL}
    register-with-eureka: false
    fetch-registry: true
  instance:
    prefer-ip-address: true
    app-group-name: fgsc
    appname: gateway
    healthcheck:
      enabled: true
zuul:
  prefix: /api
#  ignored-services: "*"
  host:
    connect-timeout-millis: 60000
    max-per-route-connections: 10000
    max-total-connections: 5000
    socket-timeout-millis: 60000
  semaphore:
    max-semaphores: 500
  strip-prefix: true
  ribbon:
    eager-load:
      enabled: true
  # TODO : REMOVE ONCE YOU FIGURE OUT CLIENT SIDE LOAD BALANCING
  sensitive-headers:
  routes:
    auth-service:
      path: /auth/**
      serviceId: auth
      stripPrefix: true
      url: https://fgsc-auth-service.herokuapp.com
    messaging-socket-service:
      path: /notifs/**
      serviceId: messaging-socket-service
      stripPrefix: true
      url: https://fgsc-rsocket-broker.herokuapp.com
    conges-service:
      path: /conges/**
      serviceId: conges-service
      stripPrefix: true
      url: https://conges-microservice.herokuapp.com/
    client-service:
      path: /client/**
      serviceId: client-service
      stripPrefix: true
      url: https://warm-falls-36309.herokuapp.com/
    employee-service:
      path: /employee/**
      serviceId: employee-service
      stripPrefix: true
      url: https://employee-microservices.herokuapp.com/
    attendance-service:
      path: /attendance/**
      serviceId: attendance-service
      stripPrefix: true
      url: https://attendance-microservices.herokuapp.com/
    projet-service:
      path: /projet/**
      serviceId: projet-service
      stripPrefix: true
      url: https://projet-microservice.herokuapp.com/
    job-service:
      path: /job/**
      serviceId: job-service
      stripPrefix: true
      url: https://job-microservices.herokuapp.com/
    departments-service:
      path: /deps/**
      serviceId: departments-service
      stripPrefix: true
      url: https://depratement.herokuapp.com/
    reclamtion-service:
      path: /rec/**
      serviceId: reclamtion-service
      stripPrefix: true
      url: https://reclamtion-microservice.herokuapp.com/
    facture-service:
      path: /fact/**
      serviceId: facture-service
      stripPrefix: true
      url: https://facturesmicro.herokuapp.com/
    satisfaction-service:
      path: /cfa/**
      serviceId: facture-service
      stripPrefix: true
      url: https://fgsc-satisfaction.herokuapp.com/
  ignored-headers: Access-Control-Allow-Credentials, Access-Control-Allow-Origin
ribbon:
  eureka:
    enabled: true
  ConnectTimeout: 10000
  ReadTimeout: 60000


hystrix:
  command:
    default:
      execution:
        isolation:
          strategy: THREAD
        thread:
          timeoutInMilliseconds: 40000

# TODO : Delete the following if you figure out how to load balance automatically by client side eureka discovery
auth-service-service:
  ribbon:
    NIWSServerListClassName: com.netflix.loadbalancer.ConfigurationBasedServerList
    listOfServers: https://fgsc-auth-service.herokuapp.com
    ConnectTimeout: 1000
    ReadTimeout: 3000
    MaxTotalHttpConnections: 500
    MaxConnectionsPerHost: 100

messaging-socket-service:
  ribbon:
    NIWSServerListClassName: com.netflix.loadbalancer.ConfigurationBasedServerList
    listOfServers: https://warm-falls-36309.herokuapp.com
    ConnectTimeout: 1000
    ReadTimeout: 3000
    MaxTotalHttpConnections: 500
    MaxConnectionsPerHost: 100

conges-service:
  ribbon:
    NIWSServerListClassName: com.netflix.loadbalancer.ConfigurationBasedServerList
    listOfServers: https://conges-microservice.herokuapp.com/
    ConnectTimeout: 1000
    ReadTimeout: 3000
    MaxTotalHttpConnections: 500
    MaxConnectionsPerHost: 100
employee-service:
  ribbon:
    NIWSServerListClassName: com.netflix.loadbalancer.ConfigurationBasedServerList
    listOfServers: https://employee-microservices.herokuapp.com/
    ConnectTimeout: 1000
    ReadTimeout: 3000
    MaxTotalHttpConnections: 500
    MaxConnectionsPerHost: 100
projet-service:
  ribbon:
    NIWSServerListClassName: com.netflix.loadbalancer.ConfigurationBasedServerList
    listOfServers: https://projet-microservice.herokuapp.com/
    ConnectTimeout: 1000
    ReadTimeout: 3000
    MaxTotalHttpConnections: 500
    MaxConnectionsPerHost: 100
attendance-service:
  ribbon:
    NIWSServerListClassName: com.netflix.loadbalancer.ConfigurationBasedServerList
    listOfServers: https://attendance-microservices.herokuapp.com/
    ConnectTimeout: 1000
    ReadTimeout: 3000
    MaxTotalHttpConnections: 500
    MaxConnectionsPerHost: 100
job-service:
  ribbon:
    NIWSServerListClassName: com.netflix.loadbalancer.ConfigurationBasedServerList
    listOfServers: https://job-microservices.herokuapp.com/
    ConnectTimeout: 1000
    ReadTimeout: 3000
    MaxTotalHttpConnections: 500
    MaxConnectionsPerHost: 100
departments-service:
  ribbon:
    NIWSServerListClassName: com.netflix.loadbalancer.ConfigurationBasedServerList
    listOfServers: https://depratement.herokuapp.com/
    ConnectTimeout: 1000
    ReadTimeout: 3000
    MaxTotalHttpConnections: 500
    MaxConnectionsPerHost: 100
reclamtion-service:
  ribbon:
    NIWSServerListClassName: com.netflix.loadbalancer.ConfigurationBasedServerList
    listOfServers: https://reclamtion-microservice.herokuapp.com/
    ConnectTimeout: 1000
    ReadTimeout: 3000
    MaxTotalHttpConnections: 500
    MaxConnectionsPerHost: 100
facture-service:
  ribbon:
    NIWSServerListClassName: com.netflix.loadbalancer.ConfigurationBasedServerList
    listOfServers: https://facturesmicro.herokuapp.com/
    ConnectTimeout: 1000
    ReadTimeout: 3000
    MaxTotalHttpConnections: 500
    MaxConnectionsPerHost: 100

satisfaction-service:
  ribbon:
    NIWSServerListClassName: com.netflix.loadbalancer.ConfigurationBasedServerList
    listOfServers: https://fgsc-satisfaction.herokuapp.com/
    ConnectTimeout: 1000
    ReadTimeout: 3000
    MaxTotalHttpConnections: 500
    MaxConnectionsPerHost: 100
